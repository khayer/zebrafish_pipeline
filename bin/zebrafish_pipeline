#!/usr/bin/env ruby
require 'zebrafish_pipeline'
require 'optparse'
require 'rubygems'
require 'yaml'

usage =<<EOF

  Usage: zebrafish_pipeline <command>

  Command:    align       fastq -> aligned_sorted.bam
              variant     bam-files -> vcf.files
              analyze     input: vcf.files

  zebrafish_pipeline ...
    ... is a tool to find varations between the reference gene and a given test
    population. To run this tool you must have bwa, picard tools and GATK installed.
    Also you should have the reference for bwa and GATK prepared.

                      +++ V E R S I O N - 0.0.1 +++

  config.yml should look like this:

    # config.yml
    bwa: "path/to/bwa"
    picard_tools: "path/to/picard_tools/"
    gatk: "path/to/GenomeAnalysisTK.jar"

EOF

if ARGV.length == 0
  puts usage
  exit 1
end

options = { :read_1 => nil,
            :read_2 => nil,
            :reference_bwa => nil,
            :output_dir => "zebrafish_aligned",
            :index_fa => nil,
            :index_vcf => nil,
            :annotation_file => nil,
            :samtools => nil,
            :gatk => nil,
            :bwa => nil,
            :vcf => nil,
            :account => "",
            :project => "",
            :debug => 1,
            :cluster => false,
            :coverage => false,
          }

case ARGV[0]
when "align"
  usage =<<EOF

  Usage:  zebrafish_pipeline align <reference_bwa> -1 in.fq [-2 paired.fq]

  align ...
    ... performs the following steps:
      For sinle-end reads:
        1) bwa aln <reference_bwa> in.fq -f in.sai
        2) bwa samse <reference_bwa> in.sai in.fq -f in.sam

      For paired-end reads:
        1) bwa aln <reference_bwa> in.fq -f in.sai
        1.1) bwa aln <reference_bwa> paired.fq -f paired.sai
        2) bwa sampe <reference_bwa> in.sai paired.sai in.fq paired.fq -f in.sam

      3) java -jar SamFormatConverter.jar I=in.sam O=in.bam
      4) java -jar AddOrReplaceReadGroups.jar I=in.bam O=in_sorted_with_rg.bam SO=coordinate ID=1 LB=library PL=Illumina PU=Index SM=samplename
      5) java -jar MarkDuplicates.jar I=WT_aligned_sorted_rg.bam O=WT_with_marked_dublicates.bam M=dublicate.metrcis AS=true
      6) java -jar ~/Downloads/picard-tools-1.56/picard-tools-1.56/BuildBamIndex.jar I=WT_with_marked_dublicates.bam O=WT_with_marked_dublicates.bai

  Options:
EOF

  options = { :read_1 => nil, :read_2 => nil, :reference_bwa => nil,
    :output_dir => "zebrafish_aligned", :gatk => nil,
    :bwa => nil, :account => "", :project => "",
    :debug => 1, :cluster => false,
  }

  options[:reference_bwa] = ARGV[1]

  optparse = OptionParser.new do |opts|
    opts.banner = usage

    opts.on("-1", "--read_1 DIR", :REQUIRED, String, "Single/Paired-end read file (FASTQ/FASTA)") do |i|
      options[:read_1] = i if i
    end

    opts.on("-2", "--read_2 DIR", String, "Paired-end read matching read 1 (FASTQ/FASTA)") do |i|
      options[:read_2] = i if i
    end

    opts.on("-c", "--config DIR", String, "Set config file") do |path|
      options.merge!(Hash[YAML::load(open(path)).map { |k, v| [k.to_sym, v] }])
    end

    opts.on("-o","--output DIR", "Output Directory. Default: zebrafish_aligned ") do |i|
      options[:output_dir] = i
    end

    opts.on("-s","--sge ", "Sun grid engine is available" ) do |i|
      options[:sge] =  true if i
    end

    opts.on("-a","--account [NAME]", "Option for qsub: -A [NAME], ignored unless sge. Default: [none] " ) do |i|
        options[:account] = " -A #{i}" if i
    end

    opts.on("-p","--project [NAME]", "Option for qsub: -P [NAME], ignored unless sge. Default: [none] " ) do |i|
      options[:project] = " -P #{i}" if i
    end

    opts.on("-d","--debug ", "Option to debug" ) do |i|
      options[:debug] =  5
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end

  begin
    optparse.parse!
    mandatory = [:read_1, :reference_bwa, :bwa, :picard_tools, :gatk]
    missing = mandatory.select{ |param| options[param].nil? }
    if !missing.empty?
      puts "\n  Missing options given or missing in config_file: \n\t#{missing.join(",\n\t")}"
      puts optparse
      exit 1
    end
  rescue OptionParser::InvalidOption, OptionParser::MissingArgument
     puts $!.to_s
     puts optparse
     exit 1
  end

  aligner = Aligner.new
  #aligner.add_options(options)
  aligner.run(options)

when "variant"
  variant = true
when "analyze"
  analyze = true
else
  STDERR.puts ARGV[0] + " is not a known command"
  STDERR.puts usage
  exit 1
end







# pipeline starts here

# tmp files for output
#random = (rand*1000000).floor.to_s
#bam_file = "mutant_#{random}"
#job_prefix = "#{random}"
#log_file = "#{random}.log"
#target_intervals = "#{random}_target.intervals"
#realigned_bam = "#{random}_realigned.bam"
#recal_file = "#{random}_recal.csv"
#recal_bam = "#{random}_recal.bam"
#sai_file_fwd = "#{random}_fwd.sai"
#sai_file_rev = "#{random}_rev.sai"
#
#options[:account] = options[:project] if options[:account].empty?
#options[:gatk] = "java -Xmx4g -jar #{options[:gatk]}" if options[:cluster]
#
## BWA : ALN
#BwaCaller.call_aln(options[:mutant_r1],
#                   options[:index_prefix],
#                   sai_file_fwd,
#                   log_file,
#                   options[:bwa],
#                   job_prefix,
#                   options[:account],
#                   options[:debug])
#
#BwaCaller.call_aln(options[:mutant_r2],
#                   options[:index_prefix],
#                   sai_file_rev,
#                   log_file,
#                   options[:bwa],
#                   job_prefix,
#                   options[:account],
#                   options[:debug])
#
#
## BWA : First step mapping reads to reference
#BwaCaller.call_paired_end(options[:mutant_r1],
#                          options[:mutant_r2],
#                          sai_file_fwd,
#                          sai_file_rev,
#                          bam_file,
#                          options[:index_prefix],
#                          log_file,
#                          options[:bwa],
#                          options[:samtools],
#                          job_prefix,
#                          options[:account],
#                          options[:debug])
#
#
## Indexing
#bam_file = bam_file + ".bam"
#SamtoolsIndexing.call(bam_file,
#                      job_prefix,
#                      options[:account],
#                      options[:debug],
#                      log_file)
#
## Realigne
#GatkCaller.prepare_realigne(log_file,
#                            options[:gatk],
#                            bam_file,
#                            options[:index_fa],
#                            target_intervals,
#                            job_prefix,
#                            options[:account],
#                            options[:debug])
#
#GatkCaller.realigne(log_file,
#                    options[:gatk],
#                    bam_file,
#                    options[:index_fa],
#                    target_intervals,
#                    realigned_bam,
#                    job_prefix,
#                    options[:account],
#                    options[:debug])
#
## Recalibration
#GatkCaller.recalibrate_bam( log_file,
#                            options[:gatk],
#                            options[:index_fa],
#                            options[:index_vcf],
#                            realigned_bam,
#                            recal_file,
#                            job_prefix,
#                            options[:account],
#                            options[:debug] )
#
#GatkCaller.table_calibration(log_file,
#                             options[:gatk],
#                             options[:index_fa],
#                             realigned_bam,
#                             recal_bam,
#                             recal_file,
#                             job_prefix,
#                             options[:account],
#                             options[:debug])
#
## GATK: finding mutations
#GatkCaller.call(log_file,
#                options[:gatk],
#                options[:index_fa],
#                options[:index_vcf],
#                recal_bam,
#                options[:vcf],
#                job_prefix,
#                options[:account],
#                options[:debug])
#
#
## GATK : coverage
#if options[:coverage]
#  outfile_prefix = options[:vcf].gsub(/.vcf/,"_coverage")
#  GatkCaller.coverage(
#    log_file,
#    options[:gatk],
#    options[:index_fa],
#    recal_bam,
#    outfile_prefix,
#    job_prefix,
#    options[:account],
#    options[:debug])
#end
